# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ayP5_FkPL75B686fdfSCHDnR59cRhPf_
"""

!pip install scikit-fuzzy

# BFS untuk grafik a
import collections

def bfs(graph, root):
    visited, queue = set(), collections.deque([root])
    visited.add(root)
    while queue:
        vertex = queue.popleft()
        print(str(vertex)+" ", end="")
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

if __name__ == '__main__':
    graph = {
        1: [2],
        2: [3],
        3: [4],
        4: [5],
        5: []
    }
    print("Breadth First Traversal (graph a):")
    bfs(graph, 1)

# DFS untuk grafik a
from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFSUtil(neighbour, visited)

    def DFS(self, v):
        visited = set()
        self.DFSUtil(v, visited)

if __name__ == "__main__":
    g = Graph()
    g.addEdge(1, 2)
    g.addEdge(2, 3)
    g.addEdge(3, 4)
    g.addEdge(4, 5)
    print("\nDepth First Traversal (graph a, start from node 1):")
    g.DFS(1)

# BFS untuk grafik b
import collections

def bfs(graph, root):
    visited, queue = set(), collections.deque([root])
    visited.add(root)
    while queue:
        vertex = queue.popleft()
        print(str(vertex)+" ", end="")
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

if __name__ == '__main__':
    graph = {
        1: [2],
        2: [3],
        3: [4],
        4: [5],
        5: [1]  # kembali ke 1 (membentuk siklus)
    }
    print("Breadth First Traversal (graph b):")
    bfs(graph, 1)

# DFS untuk grafik b
from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFSUtil(neighbour, visited)

    def DFS(self, v):
        visited = set()
        self.DFSUtil(v, visited)

if __name__ == "__main__":
    g = Graph()
    g.addEdge(1, 2)
    g.addEdge(2, 3)
    g.addEdge(3, 4)
    g.addEdge(4, 5)
    g.addEdge(5, 1)  # kembali ke 1 (siklus)
    print("\nDepth First Traversal (graph b, start from node 1):")
    g.DFS(1)

# BFS c
import collections

def bfs(graph, root):
    visited, queue = set(), collections.deque([root])
    visited.add(root)
    while queue:
        vertex = queue.popleft()
        print(str(vertex)+" ", end="")
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

if __name__ == '__main__':
    graph = {
        1: [2, 3, 4, 5, 6],
        2: [],
        3: [],
        4: [],
        5: [],
        6: []
    }
    print("Breadth First Traversal (graph c):")
    bfs(graph, 1)

#Dfs C
from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFSUtil(neighbour, visited)

    def DFS(self, v):
        visited = set()
        self.DFSUtil(v, visited)

if __name__ == "__main__":
    g = Graph()
    g.addEdge(1, 2)
    g.addEdge(1, 3)
    g.addEdge(1, 4)
    g.addEdge(1, 5)
    g.addEdge(1, 6)
    print("\nDepth First Traversal (graph c, start from node 1):")
    g.DFS(1)

#bfs d
import collections

def bfs(graph, root):
    visited, queue = set(), collections.deque([root])
    visited.add(root)
    while queue:
        vertex = queue.popleft()
        print(str(vertex)+" ", end="")
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

if __name__ == '__main__':
    graph = {
        1: [2, 3],
        2: [3],
        3: [4],
        4: [5],
        5: []
    }
    print("Breadth First Traversal (graph d):")
    bfs(graph, 1)

#DFs d
from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFSUtil(neighbour, visited)

    def DFS(self, v):
        visited = set()
        self.DFSUtil(v, visited)

if __name__ == "__main__":
    g = Graph()
    g.addEdge(1, 2)
    g.addEdge(1, 3)
    g.addEdge(2, 3)
    g.addEdge(3, 4)
    g.addEdge(4, 5)
    print("\nDepth First Traversal (graph d, start from node 1):")
    g.DFS(1)

#bfs d
import collections

def bfs(graph, root):
    visited, queue = set(), collections.deque([root])
    visited.add(root)
    while queue:
        vertex = queue.popleft()
        print(str(vertex)+" ", end="")
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

if __name__ == '__main__':
    graph = {
        1: [3],
        3: [5],
        5: [2],
        2: [4],
        4: []
    }
    print("Breadth First Traversal (graph e):")
    bfs(graph, 1)

#DFs d
from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFSUtil(neighbour, visited)

    def DFS(self, v):
        visited = set()
        self.DFSUtil(v, visited)

if __name__ == "__main__":
    g = Graph()
    g.addEdge(1, 3)
    g.addEdge(3, 5)
    g.addEdge(5, 2)
    g.addEdge(2, 4)
    print("\nDepth First Traversal (graph e, start from node 1):")
    g.DFS(1)

# greedy a
from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))

    came_from = {}
    explored = set()

    total_cost = 0

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek (Greedy):", path)
            print("Total biaya (Greedy):", total_cost)
            return path

        explored.add(current_node)

        for neighbor, cost in graph.get(current_node, {}).items():
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node
                total_cost += cost
                break  # Greedy hanya memilih satu terbaik

    print("Simpul tujuan tidak ditemukan!")
    return None

# Data graf dan heuristik
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'D': 2},
    'C': {'E': 3},
    'D': {'F': 5},
    'E': {'F': 1},
    'F': {'G': 2}
}

heuristic = {
    'A': 7, 'B': 6, 'C': 5, 'D': 4, 'E': 3, 'F': 2, 'G': 0
}

start_node = 'A'
goal_node = 'G'

greedy_search(graph, heuristic, start_node, goal_node)

#a*a
from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()  # Antrian prioritas
    frontier.put((heuristic[start], start))  # Tambahkan simpul

    came_from = {}  # Menyimpan jalur
    explored = set()  # Menyimpan simpul yang sudah dikunjungi
    total_cost = 0

    while not frontier.empty():
        _, current_node = frontier.get()  # Ambil simpul dengan nilai heuristik terkecil

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            print("Total biaya:", total_cost)
            return path  # Kembalikan jalur yang ditemukan

        explored.add(current_node)

        for neighbor in graph.get(current_node, []):
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node  # Simpan jalur
                total_cost += edge_costs.get((current_node, neighbor), 0)
                break  # Hanya pilih satu terbaik (Greedy)

    print("Simpul tujuan tidak ditemukan!")
    return None

# Daftar heuristik
heuristic = {
    'A': 7,
    'B': 6,
    'C': 5,
    'D': 4,
    'E': 3,
    'F': 2,
    'G': 0
}

# Graf menggunakan dictionary
graph = {
    'A': ['B', 'C'],
    'B': ['D'],
    'C': ['E'],
    'D': ['F'],
    'E': ['F'],
    'F': ['G']
}

# Biaya antar simpul
edge_costs = {
    ('A', 'B'): 1,
    ('A', 'C'): 4,
    ('B', 'D'): 2,
    ('C', 'E'): 3,
    ('D', 'F'): 5,
    ('E', 'F'): 1,
    ('F', 'G'): 2
}

# Titik awal dan tujuan
start_node = 'A'
goal_node = 'G'

# Panggil fungsi greedy search
greedy_search(graph, heuristic, start_node, goal_node)

# greedy b
from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))

    came_from = {}
    explored = set()

    total_cost = 0

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek (Greedy):", path)
            print("Total biaya (Greedy):", total_cost)
            return path

        explored.add(current_node)

        for neighbor, cost in graph.get(current_node, {}).items():
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node
                total_cost += cost
                break  # Greedy hanya memilih satu terbaik

    print("Simpul tujuan tidak ditemukan!")
    return None

# Data graf dan heuristik
graph = {
    'S': {'A': 2, 'B': 3},
    'A': {'D': 2, 'C': 4},
    'B': {'E': 6},
    'C': {'G': 3},
    'D': {'G': 4},
    'E': {'G': 1}
}

heuristic = {
    'S': 7, 'A': 6, 'B': 5, 'C': 2, 'D': 3, 'E': 4, 'G': 0
}

start_node = 'S'
goal_node = 'G'

greedy_search(graph, heuristic, start_node, goal_node)

#a*b
from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()  # Antrian prioritas
    frontier.put((heuristic[start], start))  # Tambahkan simpul

    came_from = {}  # Menyimpan jalur
    explored = set()  # Menyimpan simpul yang sudah dikunjungi
    total_cost = 0

    while not frontier.empty():
        _, current_node = frontier.get()  # Ambil simpul dengan nilai heuristik terkecil

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            print("Total biaya:", total_cost)
            return path  # Kembalikan jalur yang ditemukan

        explored.add(current_node)

        for neighbor in graph.get(current_node, []):
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node  # Simpan jalur
                total_cost += edge_costs.get((current_node, neighbor), 0)
                break  # Hanya pilih satu terbaik (Greedy)

    print("Simpul tujuan tidak ditemukan!")
    return None

# Daftar heuristik
heuristic = {
    'S': 7,
    'A': 6,
    'B': 5,
    'C': 2,
    'D': 3,
    'E': 4,
    'G': 0
}

# Graf menggunakan dictionary
graph = {
    'S': ['A', 'B'],
    'A': ['D', 'C'],
    'B': ['E'],
    'C': ['G'],
    'D': ['G'],
    'E': ['G']
}

# Biaya antar simpul
edge_costs = {
    ('S', 'A'): 2,
    ('S', 'B'): 3,
    ('A', 'D'): 2,
    ('A', 'C'): 4,
    ('B', 'E'): 6,
    ('C', 'G'): 3,
    ('D', 'G'): 4,
    ('E', 'G'): 1
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi greedy search
greedy_search(graph, heuristic, start_node, goal_node)

# greedy a
from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))

    came_from = {}
    explored = set()

    total_cost = 0

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek (Greedy):", path)
            print("Total biaya (Greedy):", total_cost)
            return path

        explored.add(current_node)

        for neighbor, cost in graph.get(current_node, {}).items():
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node
                total_cost += cost
                break  # Greedy hanya memilih satu terbaik

    print("Simpul tujuan tidak ditemukan!")
    return None

# Data graf dan heuristik
graph = {
    'S': {'A': 2, 'B': 3},
    'A': {'D': 2},
    'B': {'E': 4},
    'D': {'F': 3},
    'E': {'F': 1},
    'F': {'G': 2}
}

heuristic = {
    'S': 6, 'A': 5, 'B': 5, 'D': 3, 'E': 3, 'F': 1, 'G': 0
}

start_node = 'S'
goal_node = 'G'

greedy_search(graph, heuristic, start_node, goal_node)

#a*c
from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()  # Antrian prioritas
    frontier.put((heuristic[start], start))  # Tambahkan simpul

    came_from = {}  # Menyimpan jalur
    explored = set()  # Menyimpan simpul yang sudah dikunjungi
    total_cost = 0

    while not frontier.empty():
        _, current_node = frontier.get()  # Ambil simpul dengan nilai heuristik terkecil

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            print("Total biaya:", total_cost)
            return path  # Kembalikan jalur yang ditemukan

        explored.add(current_node)

        for neighbor in graph.get(current_node, []):
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node  # Simpan jalur
                total_cost += edge_costs.get((current_node, neighbor), 0)
                break  # Hanya pilih satu terbaik (Greedy)

    print("Simpul tujuan tidak ditemukan!")
    return None

# Daftar heuristik
heuristic = {
    'S': 6,
    'A': 5,
    'B': 5,
    'D': 3,
    'E': 3,
    'F': 1,
    'G': 0
}

# Graf menggunakan dictionary
graph = {
    'S': ['A', 'B'],
    'A': ['D'],
    'B': ['E'],
    'D': ['F'],
    'E': ['F'],
    'F': ['G']
}

# Biaya antar simpul
edge_costs = {
    ('S', 'A'): 2,
    ('S', 'B'): 3,
    ('A', 'D'): 2,
    ('B', 'E'): 4,
    ('D', 'F'): 3,
    ('E', 'F'): 1,
    ('F', 'G'): 2
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi greedy search
greedy_search(graph, heuristic, start_node, goal_node)